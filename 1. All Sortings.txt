//________________BUB_INS_SEL________________________________________________________________________________________________________________________________
#include<stdio.h>
void show(int a[],int n){for(int i=0;i<n;i++) printf("%d ",a[i]);
                         printf("\n");}
void bubsort(int a[],int n)
             {int i,j,t,c1=0,c2=0;
              for(i=0;i<n-1;i++) 
                 { for(j=0;j<n-i-1;j++)  //why n-i-1? :- u know j+1 is not valid for last number
                      if(a[j]>a[j+1]) {t=a[j];a[j]=a[j+1];a[j+1]=t;c1++;c2++;}
                      else c1++;
                   show(a,n);
                 }printf("%d\n%d %d\n",i,c1,c2);
             }
void inssort(int a[],int n)
             {int i,j,c1=0,c2=0,k,t;
              for(i=1;i<n;i++) 
                  {for(j=i-1,k=a[i];j>=0;j--) 
                          if(a[j]>k){c1++;c2++;a[j+1]=a[j];}
                          else      {c1++;break;}
                   a[j+1]=k;                        
                   show(a,n);
                  }printf("%d\n%d %d\n",i-1,c1,c2);
             }
void selsort(int a[],int n)
             {int i,j,t,c1=0,c2=0,smind;
              for(i=0;i<n-1;i++) 
                 { for(j=i+1,smind=i;j<n;j++)  //assume a[i] itself a lowest number
                      if(a[j]<a[smind]) {smind=j;c1++;}
                      else c1++;
                    if(smind!=i) {t=a[i]; a[i]=a[smind]; a[smind]=t;c2++;} //check whether our assumption is wrong or right
                    show(a,n);
                 }printf("%d\n%d %d\n",i,c1,c2);
             }
int main()
{ int n;
  scanf("%d",&n); int arr[n];
  for(int i=0;i<n;i++) scanf("%d",&arr[i]);
  bubsort(arr,n); // or  
  //selsort(arr,n); // or
  //inssort(arr,n); // or

  show(arr,n);
  return 0;
}

_________________________________________________________________________________________________________________________________________
//..................................Counting sort................
#include <stdio.h>
int main()
{ int i,j;
  int a[]={4,-2,-5,7,7,11,-1,8,8,2};// max=9 min=-5 {we can find max & min using ud functions}
  int c[17]={0};                   // c[max + |min| + 0] i.e shifting..... 
  for(i=0;i<10;i++) c[a[i]+5]++;
  for(i=0;i<17;i++) for(j=0;j<c[i];j++) printf("%d ",i-5);
  return 0;
}


_________________________________________________________________________________________________________________________________________
//.................................MERGE SORT...........................

//Creating Sub Arrays (Not Based on index)
#include<stdio.h>
#include<ctype.h>
#define ln(x)  (sizeof(x)/sizeof((x)[0]))
#define pf(a,b) (printf(a,b));
void show(int a[],int n){for(int i=0;i<n;i++) pf("%d ",a[i]); pf("%s","\n\n");}
void meg_merg(int *l,int nl,int *r,int nr,int *a);

void meg_divd(int a[],int n)
             {int m;
              if(n<2) {}
              else {m=n/2;
                    int l[m],r[n-m];
                    for(int i=0;i<m;i++) l[i]=a[i];
                    for(int i=m;i<n;i++) r[i-m]=a[i]; //* [i-m]
                    meg_divd(l,m);
                    meg_divd(r,n-m);
                    show(a,5);
                    meg_merg(l,m,r,n-m,a);
                   }
             }
void meg_merg(int *l,int nl,int *r,int nr,int *a)
             {int i=0,j=0,k=0;
              while(i<nl && j<nr) if(l[i]<=r[j]) a[k++]=l[i++]; else a[k++]=r[j++];
              while(i<nl) a[k++]=l[i++]; while(j<nr) a[k++]=r[j++];
              
             }
int main()
{ int n;
  scanf("%d",&n); int arr[n];
  for(int i=0;i<n;i++) scanf("%d",&arr[i]);
  meg_divd(arr,n); 
  show(arr,ln(arr));
  return 0;  
}
/*
k  = key
t  = temperory variable 
p  = no of passes.......................
c1 = no of comparisions
c2 = no of swaps

ex:- 
5
3 0 2 99 -1

5
5 4 3 2 1
*/


_________________________________________________________________________________________________________________________________________
//.............................................................QUICK SORT...............................................................

//based on index (Not Creating Sub Arrays)
#include<stdio.h>
void swap(int *p,int *q){int t=*p;*p=*q;*q=t;}
void show(int a[],int n){for(int i=0;i<n;i++) printf("%d%c",a[i],(i==n-1)?'\n':' ');}

void qk_cmp(int a[],int n,int ss,int ee);
void qk_divd(int a[],int n,int p,int q)
             {if(q-p<1) {}
              else qk_cmp(a,n,p,q);
             }
void qk_cmp(int a[],int n,int ss,int ee)
                         { int *s,*e,*x,*y,k; k=a[ss];
                           s=&a[ss];e=&a[ee]; x=&a[ee],y=&a[ss];
                           while(e>s){ while(*s<=k) s++;
                                       while(*e>k) e--;
                                       if(e>s) swap(s,e);
                                     }swap(y,e); //show(a,n); 
                           qk_divd(a,n,ss,ss+e-y-1);
                           qk_divd(a,n,e-y+1+ss,ee);
                         }
int main()
{ int n; scanf("%d",&n);
  int a[n];
  for(int i=0;i<n;i++) scanf("%d",&a[i]);
  qk_cmp(a,n,0,n-1);
  show(a,n);
  return 0;
}
/*
#include<stdio.h>
void swap(int *p,int *q){int t=*p;*p=*q;*q=t;}
void show(int a[],int n){for(int i=0;i<n;i++) printf("%d%s",a[i],(i==n-1)?"\n\n":" ");}

void qk_cmp(int a[],int n,int ss,int ee);
void qk_divd(int a[],int p,int q)
             {if(q-p<1) {}
              else qk_cmp(a,9,p,q);
             }
void qk_cmp(int a[],int n,int ss,int ee)
            { int *s,*e,*x,*y,k; k=a[ss];
              s=&a[ss];e=&a[ee]; x=&a[ee],y=&a[ss];
              while(e>s){ while(*s<=k) s++;
                          while(*e>k) e--;
                          if(e>s) swap(s,e);
                         }swap(y,e); show(a,n); 
              qk_divd(a,ss,ss+e-y-1);
              qk_divd(a,e-y+1+ss,ee);
            }
int main()
{
 int a[]={18,42,58,15,52,1,76,44,10};
 qk_cmp(a,9,0,8);
 return 0;
}
*/

_______________________________________________________________________________________________________________________________________



