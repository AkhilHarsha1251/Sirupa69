int Max(int x,int y){return (x>y)?x:y; }
int BTHeight(struct node *root)
{ int Lheight,Rheight;
  if (root == NULL) return 0;
  Lheight = BTHeight(root->left);
  Rheight = BTHeight(root->right);
  return Max(Lheight, Rheight) + 1;
}
//main code__________________________________________________________________________________________________________________________

#include <stdio.h>
#include<stdlib.h>
static int c=1,n;
struct node{ int data;
             struct node* left;
             struct node* right;
           };
struct node* new(int x)
           { struct node* temp=malloc(sizeof(struct node));
             temp->data=x;
             temp->left=NULL;
             temp->right=NULL;
             return temp;
           }
void in(struct node* root)
{ if(root==NULL) return; 
  in(root->left);
  if(root->data!=0) printf("%d ",root->data); // or printf("%d ",root->data);
  in(root->right);
}
void pre(struct node* root)
 { if(root==NULL) return;
   if(root->data!=0) printf("%d ",root->data); // or printf("%d ",root->data);
   pre(root->left);
   pre(root->right);
}
void post(struct node* root)
 { if(root==NULL) return;
   post(root->left);
   post(root->right);
   if(root->data!=0) printf("%d ",root->data); // or printf("%d ",root->data);
}
void insL(struct node* root,int x)
 { root->left=new(x);
 }
void insR(struct node* root,int x)
 { root->right=new(x);
 }
void ArrToBinaryTree(struct node *root,int arr[],int i)
 { if(2*i+1<n && 2*i+2<n) 
        { insL(root,arr[2*i+1]);
          insR(root,arr[2*i+2]); 
          ArrToBinaryTree(root->left,arr,2*i+1);
          ArrToBinaryTree(root->right,arr,2*i+2);
        } 
 }
void preArr(int arr[],int i)
 {  if(arr[i]==0 || i>15) return;
    printf("%d ",arr[i]);
    preArr(arr,2*i+1);
    preArr(arr,2*i+2);
    
 }
void posArr(int arr[],int i)
 {  if(arr[i]==0 || i>15) return;
    posArr(arr,2*i+1);
    posArr(arr,2*i+2);
    printf("%d ",arr[i]);
 }
void inArr(int arr[],int i)
 {  if(arr[i]==0 || i>15) return;
    inArr(arr,2*i+1);
    printf("%d ",arr[i]);
    inArr(arr,2*i+2);
 }
int main()
{ int arr[15],i;
  n=15;
  for(i=0;i<15;i++) scanf("%d",&arr[i]);
  struct node *root=new(arr[0]);
  ArrToBinaryTree(root,arr,0);
  //pre(root);
  //printf("\n");
  //post(root);
  //printf("\n");
  //in(root);
  //printf("\n");

  return 0;
}



/*
#include <stdio.h>
#include<stdlib.h>
static int c=1,n;
struct node{ int data;
             struct node* left;
             struct node* right;
           };
struct node* new(int x)
           { struct node* temp=malloc(sizeof(struct node));
             temp->data=x;
             temp->left=NULL;
             temp->right=NULL;
             return temp;
           }
void in(struct node* root)
{ if(root==NULL) return; 
  in(root->left);
  if(root->data!=0) printf("%d ",root->data); // or printf("%d ",root->data);
  in(root->right);
}
void pre(struct node* root)
 { if(root==NULL) return;
   if(root->data!=0) printf("%d ",root->data); // or printf("%d ",root->data);
   pre(root->left);
   pre(root->right);
}
void post(struct node* root)
 { if(root==NULL) return;
   post(root->left);
   post(root->right);
   if(root->data!=0) printf("%d ",root->data); // or printf("%d ",root->data);
}
void insL(struct node* root,int x)
 { root->left=new(x);
 }
void insR(struct node* root,int x)
 { root->right=new(x);
 }
void ArrToBinaryTree(struct node *root,int arr[],int i)
 { if(2*i+1<n && 2*i+2<n) 
        { insL(root,arr[2*i+1]);
          insR(root,arr[2*i+2]); 
          ArrToBinaryTree(root->left,arr,2*i+1);
          ArrToBinaryTree(root->right,arr,2*i+2);
        } 
 }
void preArr(int arr[],int i)
 {  if(arr[i]==0 || i>15) return;
    printf("%d ",arr[i]);
    preArr(arr,2*i+1);
    preArr(arr,2*i+2);
    
 }
void posArr(int arr[],int i)
 {  if(arr[i]==0 || i>15) return;
    posArr(arr,2*i+1);
    posArr(arr,2*i+2);
    printf("%d ",arr[i]);
 }
void inArr(int arr[],int i)
 {  if(arr[i]==0 || i>15) return;
    inArr(arr,2*i+1);
    printf("%d ",arr[i]);
    inArr(arr,2*i+2);
 }
int main()
{ int arr[15],i;
  n=15;
  for(i=0;i<15;i++) scanf("%d",&arr[i]);
  struct node *root=new(arr[0]);
  ArrToBinaryTree(root,arr,0);
  //pre(root);
  //printf("\n");
  //post(root);
  //printf("\n");
  //in(root);
  //printf("\n");

  return 0;
}

/*---------------------------------Using Only Arrays...............................

void preArr(int arr[],int i)
 {  if(arr[i]==0 || i>15) return;
    printf("%d ",arr[i]);
    preArr(arr,2*i+1);
    preArr(arr,2*i+2);
    
 }
void posArr(int arr[],int i)
 {  if(arr[i]==0 || i>15) return;
    posArr(arr,2*i+1);
    posArr(arr,2*i+2);
    printf("%d ",arr[i]);
 }
void inArr(int arr[],int i)
 {  if(arr[i]==0 || i>15) return;
    inArr(arr,2*i+1);
    printf("%d ",arr[i]);
    inArr(arr,2*i+2);
 }
int main()
{ int arr[15],i;
  n=15;
  for(i=0;i<15;i++) scanf("%d",&arr[i]);
  printf("\n\n");
  inArr(arr,0);
  printf("\n\n");
  preArr(arr,0);
  printf("\n\n");
  posArr(arr,0);
  printf("\n\n");

return 0;
}
*/   /*

        Input
        5 6 10 1 3 0 12 0 0 40 90 0 0 30 20
        Expected output
        1 6 40 3 90 5 10 30 12 20
        5 6 1 3 40 90 10 12 30 20
        1 40 90 3 6 30 20 12 10 5

     */
/*---------------------------------------------*/



________________________________________________________________________________________________________________________________________________
IPS array to BST and with key find path
________________________________________________________________________________________________________________________________________________
#include <stdio.h>
#include <stdlib.h>
struct node
{ int data;
  struct node *left;
  struct node *right;
};

struct node* create(int x)
{struct node* temp=(struct node*)malloc(sizeof(struct node));
 temp->data=x;
 temp->left=NULL;
 temp->right=NULL;
 return temp;
}

void ins(struct node* root,int x)
{struct node* temp=create(x);
 struct node* roottemp=root;
 while(1){ if     (x< roottemp->data && roottemp->left==NULL)  {roottemp->left=temp;  break;}
           else if(x<roottemp->data) roottemp=roottemp->left;
           else if(x>=roottemp->data && roottemp->right==NULL) {roottemp->right=temp; break;}
           else roottemp=roottemp->right;
         }
}

void path(struct node* root,int n,int x)
{ struct node* temp=root;int arr[n],c=0,v=0;
  while(temp!=NULL) {if(x==temp->data) {arr[c++]=x; v=1; break;}
                     else if(x<temp->data) {arr[c++]=temp->data; temp=temp->left;}
                     else {arr[c++]=temp->data; temp=temp->right;}
                    }
  if(v!=1) printf("Not  found"); 
  else for(int i=0;i<c;i++)// printf("%d ",arr[i]); 
                           printf("%d%c",arr[i],(i==c-1)?'\n':' ');
}

int main() 
{ int n=7,i,a,b; //scanf("%d",&n);
  int arr[n];
  for(i=0;i<n;i++) scanf("%d",&arr[i]);
  struct node* root=create(arr[0]);
  for(i=1;i<n;i++) ins(root,arr[i]);
  scanf("%d%d",&a,&b);
  path(root,n,a);
 // printf("\n");
  path(root,n,b);
  return 0;
}
________________________________________________________________________________________________________________________________________________